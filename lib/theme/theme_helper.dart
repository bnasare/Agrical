// ignore: unnecessary_import
import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.blueGray200,
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray100Cc,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900.withOpacity(0.8),
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'Mrs Saint Delafield',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray900.withOpacity(0.41),
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray700,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          color: appTheme.yellow50,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Anton',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: getFontSize(
            23,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray9008201,
          fontSize: getFontSize(
            25,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFFC3EA9C),
    error: Color(0XC1080A08),
    errorContainer: Color(0X72283A98),
    inversePrimary: Color(0XFFC3EA9C),
    inverseSurface: Color(0XC1080A08),
    onBackground: Color(0XFF0C2B28),
    onError: Color(0XFF5D5639),
    onErrorContainer: Color(0XFFFFFFFF),
    onInverseSurface: Color(0XFF5D5639),
    onPrimary: Color(0XC1080A08),
    onPrimaryContainer: Color(0XFF0C2B28),
    onSecondary: Color(0XFF0C2B28),
    onSecondaryContainer: Color(0XC1080A08),
    onSurface: Color(0XFF0C2B28),
    onSurfaceVariant: Color(0XC1080A08),
    onTertiary: Color(0XFF0C2B28),
    onTertiaryContainer: Color(0XC1080A08),
    outline: Color(0XC1080A08),
    outlineVariant: Color(0XFFC3EA9C),
    primary: Color(0X54214C49),
    primaryContainer: Color(0XFFC3EA9C),
    scrim: Color(0XFFC3EA9C),
    secondary: Color(0XFFC3EA9C),
    secondaryContainer: Color(0XFF214C49),
    shadow: Color(0XC1080A08),
    surface: Color(0XFFC3EA9C),
    surfaceTint: Color(0XC1080A08),
    surfaceVariant: Color(0XFF214C49),
    tertiary: Color(0XFFC3EA9C),
    tertiaryContainer: Color(0XFF214C49),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFF9DB0C1);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray40072 => Color(0X727C9C7C);
  Color get blueGray50 => Color(0XFFEEF5F4);
  Color get blueGray700 => Color(0XFF325073);
  Color get blueGray900 => Color(0XFF231B54);
  // BlueGraye
  Color get blueGray9008e => Color(0X8E042142);
  // DeepOrange
  Color get deepOrange50 => Color(0XFFF3E7E7);
  Color get deepOrange5001 => Color(0XFFFFE8E8);
  // Gray
  Color get gray100 => Color(0XFFF8F1F1);
  Color get gray10001 => Color(0XFFF9F1F1);
  Color get gray400 => Color(0XFFC1BA9D);
  Color get gray40001 => Color(0XFFE0B4B4);
  Color get gray50 => Color(0XFFFBF7F7);
  Color get gray500 => Color(0XFFAD8686);
  Color get gray50001 => Color(0XFFA89A9A);
  Color get gray5001 => Color(0XFFFFF4F4);
  Color get gray5044 => Color(0X44FCF9F9);
  Color get gray600 => Color(0XFF677F76);
  Color get gray60001 => Color(0XFF995D5D);
  Color get gray700 => Color(0XFF695F5F);
  Color get gray70001 => Color(0XFF6A5E5E);
  Color get gray900 => Color(0XFF0D2725);
  Color get gray90001 => Color(0XFF0D2625);
  Color get gray90072 => Color(0X723C0505);
  Color get gray90082 => Color(0X822F0606);
  Color get gray9008201 => Color(0X82052D0C);
  // GrayCc
  Color get gray100Cc => Color(0XCCFAF6F6);
  // GrayD
  Color get gray700D3 => Color(0XD35C5A5A);
  // Graye
  Color get gray9008e => Color(0X8E2E1909);
  // GreenAf
  Color get green400Af => Color(0XAF5BA278);
  // Green
  Color get green900 => Color(0XFF106B35);
  // Indigo
  Color get indigo300 => Color(0XFF7C92CA);
  // IndigoCc
  Color get indigo400Cc => Color(0XCC6352CE);
  // IndigoD
  Color get indigo900D3 => Color(0XD3201468);
  // LightGreen
  Color get lightGreen200 => Color(0XFFC3E48D);
  Color get lightGreen400 => Color(0XFF98A670);
  Color get lightGreen50 => Color(0XFFEEF3EA);
  Color get lightGreen900 => Color(0XFF386218);
  Color get lightGreen90001 => Color(0XFF386118);
  // Lime
  Color get lime300 => Color(0XFFDBDD7B);
  // Red
  Color get red100 => Color(0XFFF3D2D2);
  Color get red10001 => Color(0XFFF3D1D1);
  Color get red200 => Color(0XFFE19C9C);
  Color get red20001 => Color(0XFFCEAC93);
  Color get red50 => Color(0XFFFFF3F3);
  // Yellow
  Color get yellow50 => Color(0XFFFFFAE9);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
